{"version":3,"sources":["components/Form.js","components/ToDo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","className","value","onChange","e","target","type","onClick","preventDefault","text","completed","id","Math","random","icon","faPlusSquare","name","ToDo","todo","map","item","faCheck","filter","el","faTrash","ToDoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ea06b1b.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\n    const inputTextHandler = (e) => {\n        setInputText(e.target.value);\n    };\n    const submitTodoHandler = (e) => {\n        e.preventDefault();\n        setTodos([\n            ...todos, {text: inputText, completed: false, id: Math.random() * 1000 }\n        ]);\n        setInputText('');\n    };\n    const statusHandler = (e) => {\n        setStatus(e.target.value);\n    }\n    return (\n    <form className=\"todo__form\">\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo__input\" />\n      <button onClick={submitTodoHandler} className=\"todo__button\" type=\"submit\">\n        <FontAwesomeIcon icon={faPlusSquare} />\n      </button>\n      <div className=\"select__container\">\n        <select \n        className=\"select\"\n        onChange={statusHandler} \n        name=\"todos\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n    );\n}\n\nexport default Form;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst ToDo = ({ text, setTodos, todos, todo }) => {\n    const deleteHandler = () => {\n        setTodos(todos.filter((el) => el.id !== todo.id));\n    };\n    const completeHandler = () => {\n        setTodos(todos.map(item => {\n            if (item.id === todo.id) {\n                return {\n                    ...item, completed: !item.completed\n                }\n            }\n            return item;\n        }))\n    };\n    return(\n        <div className=\"todo\">\n            <li className={`todo__item ${todo.completed ? 'completed' : ''}`}>{text}</li>\n            <button onClick={completeHandler} className=\"complete-btn\">\n                <FontAwesomeIcon icon={faCheck} />\n            </button>\n            <button onClick={deleteHandler} className=\"trash-btn\">\n                <FontAwesomeIcon icon={faTrash} />\n            </button>\n        </div>\n    );\n}\n\nexport default ToDo;","import React from 'react';\nimport ToDo from './ToDo';\n\nconst ToDoList = ({ todos, setTodos, filteredTodos }) => {\n    return (\n        <div className=\"todo__container\">\n            <ul className=\"todo__list\">\n                {filteredTodos.map((todo) => (\n                    <ToDo \n                      text={todo.text} \n                      key={todo.id} \n                      todos={todos} \n                      todo={todo} \n                      setTodos={setTodos}\n                      />\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default ToDoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport ToDoList from './components/ToDoList';\n\nfunction App() {\n  const [inputText, setInputText] = useState(''); \n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n  const filterHandler = () => {\n    switch(status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed == true));\n        break;\n      case 'uncompleted': \n        setFilteredTodos(todos.filter(todo => todo.completed == false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem('todos'));\n      setTodos(todoLocal);\n    }\n  };\n  return (\n    <div className=\"App\">\n    <header className=\"header\">\n      <h1 className=\"header__title\">My To Do List</h1>\n    </header>\n    <Form \n      todos={todos} \n      setTodos={setTodos} \n      setInputText={setInputText} \n      inputText={inputText} \n      setStatus={setStatus} />\n    <ToDoList \n      todos={todos} \n      setTodos={setTodos}\n      filteredTodos={filteredTodos}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}